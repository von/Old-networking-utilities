#!/usr/local/bin/perl
###########################################################################
#
#	parse.nettest
#
#	Parse the output of multi_nettest
#
#	$Id: parse.nettest,v 1.3 1995/03/03 05:11:44 vwelch Exp $
#
###########################################################################

require 'getopts.pl';

###########################################################################

$KILOBYTE = 1024;

###########################################################################

$DO_KILOBYTES = 1;

###########################################################################

&Getopts('k');

if (defined($opt_k)) {
    $DO_KILOBYTES = !$DO_KILOBYTES;
}

###########################################################################

while(<>) {
    if (/^\#/) {		# Comment from multi_nettest
	print;
    }

    if (/^Transfer/) {
	($FLAK, $DATA, $FLAK) = split;
	($NUMBER_BUFFERS, $BUFFER_SIZE) = split(/\*/, $DATA);
    }

    if (/^  write/) {
	$WRITE_REAL_TIME{$BUFFER_SIZE} += substr($_, 7, 8);
	$WRITE_SYS_TIME{$BUFFER_SIZE} += substr($_, 15, 8);
	$WRITE_SYS_PERCENT{$BUFFER_SIZE} += substr($_, 25, 4);
	$WRITE_USER_TIME{$BUFFER_SIZE} += substr($_, 31, 8);
	$WRITE_USER_PERCENT{$BUFFER_SIZE} += substr($_, 41, 4);
	$THROUGHPUT = substr($_, 56, 9);
	$WRITE_THROUGHPUT{$BUFFER_SIZE} += $THROUGHPUT;
	if ($THROUGHPUT > $WRITE_PEAK{$BUFFER_SIZE}) {
	    $WRITE_PEAK{$BUFFER_SIZE} = $THROUGHPUT;
	}
	$WRITE_COUNT{$BUFFER_SIZE}++;
    }

    if (/^   read/) {
	$READ_REAL_TIME{$BUFFER_SIZE} += substr($_, 7, 8);
	$READ_SYS_TIME{$BUFFER_SIZE} += substr($_, 15, 8);
	$READ_SYS_PERCENT{$BUFFER_SIZE} += substr($_, 25, 4);
	$READ_USER_TIME{$BUFFER_SIZE} += substr($_, 31, 8);
	$READ_USER_PERCENT{$BUFFER_SIZE} += substr($_, 41, 4);
	$THROUGHPUT = substr($_, 56, 9);
	$READ_THROUGHPUT{$BUFFER_SIZE} += $THROUGHPUT;
	if ($THROUGHPUT > $READ_PEAK{$BUFFER_SIZE}) {
	    $READ_PEAK{$BUFFER_SIZE} = $THROUGHPUT;
	}
	$READ_COUNT{$BUFFER_SIZE}++;
    }

    if (/^Load average/) {
	(@STUFF) = split;
	$LOAD_AVERAGE_TOTAL += $STUFF[13];
	$LOAD_AVERAGE_COUNT++;
    }
}

printf("#average load on source: %.2f\n",
       $LOAD_AVERAGE_TOTAL/$LOAD_AVERAGE_COUNT);

@BUFFER_SIZES = sort {$a <=> $b} keys(%WRITE_THROUGHPUT);

print "\nWRITE Results:\n";
print "Buffer size\tAvg Sys Time\tAvg Usr Time\tAvg Mb/s\tPeak Mb/s\n";

foreach $BUFFER_SIZE (@BUFFER_SIZES) {
    $COUNT = $WRITE_COUNT{$BUFFER_SIZE};
    
    printf(" %s\t   %4.2f%%\t   %4.2f%%\t  %6.1f\t  %6.1f\n",
	   &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	   $WRITE_SYS_PERCENT{$BUFFER_SIZE}/$COUNT,
	   $WRITE_USER_PERCENT{$BUFFER_SIZE}/$COUNT,
	   $WRITE_THROUGHPUT{$BUFFER_SIZE}/$COUNT,
	   $WRITE_PEAK{$BUFFER_SIZE});
}

@BUFFER_SIZES = sort {$a <=> $b} keys(%READ_THROUGHPUT);

print "\nREAD Results:\n";
print "Buffer size\tAvg Sys Time\tAvg Usr Time\tAvg Mb/s\tPeak Mb/s\n";

foreach $BUFFER_SIZE (@BUFFER_SIZES) {
    $COUNT = $READ_COUNT{$BUFFER_SIZE};

    printf(" %s\t   %4.2f%%\t   %4.2f%%\t  %6.1f\t  %6.1f\n",
	   &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	   $READ_SYS_PERCENT{$BUFFER_SIZE}/$COUNT,
	   $READ_USER_PERCENT{$BUFFER_SIZE}/$COUNT,
	   $READ_THROUGHPUT{$BUFFER_SIZE}/$COUNT,
	   $READ_PEAK{$BUFFER_SIZE});
}

###########################################################################

sub BUFFER_SIZE_TO_STR {
    local($BUFFER_SIZE) = shift(@_);

    if ($DO_KILOBYTES) {
	$BUFFER_SIZE /= $KILOBYTE;

	if ($BUFFER_SIZE == int($BUFFER_SIZE)) {
	    $BUFFER_STRING = sprintf("%dK", $BUFFER_SIZE);
	    
	} else {
	    $BUFFER_STRING = sprintf("%.3fK", $BUFFER_SIZE);
	}

    } else {
	$BUFFER_STRING = sprintf("%d", $BUFFER_SIZE);
    }

    return sprintf("%8.8s", $BUFFER_STRING);
}
