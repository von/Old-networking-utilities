#!/bin/sh
#  For convex use /bin/ksh
#
#set -x
###########################################################################
#
#	mutli_nettest
#
#	Run a bunch a nettests between the local host and a specificed
#	target host recording the results in a log file.
#
###########################################################################
#
#	Written by vwelch@ncsa.uiuc.edu 2/28/95
#
#	$Date: 1995/03/08 21:50:57 $
#
###########################################################################

localhost=`hostname`

kilobyte=1024
megabyte=1048576

total_data=`expr 60 \* $megabyte`

repetitions=5

buffer_sizes="1024 2048 4096 7168 8192 15360 16384 31744 32768 49152 58368 61440 64512 65536 131072"

nettest_path=""
nettest_cmd="nettest"
nettest_args="-l"

sock_buffer_size="default"

dedicated="no"

###########################################################################

usage()	{
	echo "Usage: $0 [<options>] <target host>";
	echo "       -b <buffer size>           Set socket buffer size.";
	echo "       -D                         Indicate dedicated mode.";
	echo "       -r <repetitions>           Repetitions of each buffer size.";
	echo "       -t <tos>                   Specify type of service.";
	echo "       -K <total data in kilobytes>";
	echo "       -M <total data in megabytes>";
	}

###########################################################################

add_args() {
	nettest_args="$nettest_args $*"
}

###########################################################################
#
#	Parse command line arguments
#

if [ -r ./.multi_nettestrc ]; then
	echo Parsing ./.multi_nettestrc...
	. ./.multi_nettestrc
fi

while getopts b:DK:M:r:t: arg
do
	case $arg in
	b)	sock_buffer_size=$OPTARG
		echo "Setting socket buffers to $sock_buffer_size bytes."
		add_args "-b $sock_buffer_size";
		;;
	D)	dedicated="yes"
		;;
	r)	repetitions=$OPTARG
		;;
	t)	add_args "-t $OPTARG";
		;;
	K)	total_data=`expr $OPTARG \* $kilobyte`
		echo "Sending $total_data bytes total."
		;;
	M)	total_data=`expr $OPTARG \* $megabyte`
		echo "Sending $total_data bytes total."
		;;
	\?)	usage
		exit 1;
	esac
done

shift `expr $OPTIND - 1`

if [ $# -eq 0 ]; then
	usage
	exit 1
fi

host=$1
shift

if [ $# -gt 0 ]; then
	echo "$0: ignoring extra arguments after \"$1\"."
fi

nettest_cmd=$nettest_path""$nettest_cmd" "$nettest_args;

###########################################################################
#
#	Decide on name of output file and make sure we can write to it
#

log_file="$localhost.to.$host.`date +%d%m%y.%H%M%S`"

echo "Writing to output file $log_file"

touch $log_file

if [ $? -eq 1 ]; then
	exit 1;
fi

cat >> $log_file << END_OF_INPUT
#nettest log: `date`
#source: $localhost
#destination: $host
#nettest command: $nettest_cmd
#total data: $total_data
#repetitions: $repetitions
#socket buffer size: $sock_buffer_size
#data file: $log_file
#dedicated: $dedicated

END_OF_INPUT

###########################################################################
#
#	Do a traceroute and record results
#

traceroute $host >> $log_file 2>&1
echo >> $log_file

###########################################################################
#
#	Do it...
#

for buffer_size in $buffer_sizes ; do
	repetition=0

	number_buffers=`expr $total_data / $buffer_size`

	if [ $number_buffers -eq 0 ]; then
		continue
	fi

	echo -n "Doing $buffer_size byte buffers:"

	while [ $repetition -lt $repetitions ]; do
		repetition=`expr $repetition + 1`

		echo -n "."

		$nettest_cmd $host $number_buffers $buffer_size \
			>>  $log_file

		if [ $? -eq 1 ]; then
			echo "nettest exiting abnormally. Aborting." | \
				tee -a $log_file
			exit 1;
		fi
		
		echo >> $log_file

	done

	echo "Done."
done

echo "Finished." | tee -a $log_file

