#!/usr/local/bin/perl
###########################################################################
#
#	parse.nettest
#
#	Parse the output of multi_nettest
#
#	$Id: parse.nettest,v 1.8 1995/06/08 19:41:18 vwelch Exp $
#
###########################################################################

require 'getopts.pl';

###########################################################################

sub USAGE {
    print "Usage:\n";
    print "  parse.nettest <options> <input file>\n";
    print "      -f <format>\n";
    print "         Formats are:   text (default)\n";
    print "                        xgraph\n";
    print "                        gnuplot\n";
    print "      -o <output>\n";
    print "         Outputs are:   default\n";
    print "                        percent\n";
    print "      -h    Display help.\n";
    print "      -k    Toggle buffers in kilobytes (default TRUE).\n";
    print "      -r    Toggle display of read stats (default TRUE).\n";
    print "      -t <type>\n";
    print "         Control output type of gnuplot. Default is to X display.\n";
    print "         Other options are:  ps\n";
    print "                             pbm (color small)\n";
    print "                             all\n";
    print "      -w    Toggle display of write stats (default TRUE).\n";
}

###########################################################################

$KILOBYTE = 1024;

###########################################################################

$DO_KILOBYTES = 1;

$OUTPUT_WRITE_STATS = 1;
$OUTPUT_READ_STATS = 1;

$FORMAT = "text";		# xgraph or gnuplot are other options
$OUTPUT = "default";		# percent is other option

# GNUPLOT output types
$GNUPLOT_X = 1;
$GNUPLOT_PS = 2;
$GNUPLOT_PBM = 4;
$GNUPLOT_ALL = 7;

$GNUPLOT_TYPE = "x";

###########################################################################

&Getopts('f:hko:rt:w');

if (defined($opt_h)) {
    &USAGE();
    exit 0;
}

if (defined($opt_k)) {
    $DO_KILOBYTES = !$DO_KILOBYTES;
}

if (defined($opt_r)) {
    $OUTPUT_READ_STATS = ! $OUTPUT_READ_STATS;
}

if (defined($opt_w)) {
    $OUTPUT_WRITE_STATS = ! $OUTPUT_WRITE_STATS;
}

if (defined($opt_f)) {
    $FORMAT = $opt_f;
}

if (defined($opt_o)) {
    $OUTPUT = $opt_o;
}


if (defined($opt_t)) {
    $GNUPLOT_TYPE = $opt_t;
}

###########################################################################
				
		    
if (($GNUPLOT_TYPE eq "x") || ($GNUPLOT_TYPE eq "X")) {
    $GNUPLOT_OUTPUT = $GNUPLOT_X;

} elsif ($GNUPLOT_TYPE eq "ps") {
    $GNUPLOT_OUTPUT = $GNUPLOT_PS;
    
} elsif ($GNUPLOT_TYPE eq "pbm") {
    $GNUPLOT_OUTPUT = $GNUPLOT_PBM;

} elsif ($GNUPLOT_TYPE eq "all") {
    $GNUPLOT_OUTPUT = $GNUPLOT_ALL;

} else {
    print "Unknow GNUPLOT type \"$GNUPLOT_TYPE\". Ignoring.\n";
}

###########################################################################
#
#	Open output file
#

if ($FORMAT eq "text") {
    $OUTPUT_FILE = "nettest.results";

} elsif ($FORMAT eq "xgraph") {
    $OUTPUT_FILE = "nettest.xgraph";

} elsif ($FORMAT eq "gnuplot") {
    $OUTPUT_FILE = "nettest.gnuplot";

} else {
    die "Unknown format \"$FORMAT\".\n";
}

open(OUTPUT_FILE, ">$OUTPUT_FILE") ||
    die "Couldn't open output file.\n";

select OUTPUT_FILE;

##########
# Check output
#
if (($OUTPUT ne "default") &&
    ($OUTPUT ne "percent")) {
    print STDERR "Unknown output \"$OUTPUT\". Going with default.\n";
    $OUTPUT = "default";
}

###########################################################################

while(<>) {
    if (/^\#/) {		# Comment from multi_nettest
	print;


	if (/^#source:/) {
	    ($FLAK, $LOCAL_HOST) = split;
	}

	if (/^#destination:/) {
	    ($FLAK, $REMOTE_HOST) = split;
	    $REMOTE_HOST =~ s/-hippi//;
	}
    }

    if (/^Transfer/) {
	($FLAK, $DATA, $FLAK) = split;
	($NUMBER_BUFFERS, $BUFFER_SIZE) = split(/\*/, $DATA);
    }

    if (/^  write/) {
	$WRITE_REAL_TIME{$BUFFER_SIZE} += substr($_, 7, 8);
	$WRITE_SYS_TIME{$BUFFER_SIZE} += substr($_, 15, 8);
	$WRITE_SYS_PERCENT{$BUFFER_SIZE} += substr($_, 25, 4);
	$WRITE_USER_TIME{$BUFFER_SIZE} += substr($_, 31, 8);
	$WRITE_USER_PERCENT{$BUFFER_SIZE} += substr($_, 41, 4);
	$THROUGHPUT = substr($_, 56, 9);
	$WRITE_THROUGHPUT{$BUFFER_SIZE} += $THROUGHPUT;
	if ($THROUGHPUT > $WRITE_PEAK{$BUFFER_SIZE}) {
	    $WRITE_PEAK{$BUFFER_SIZE} = $THROUGHPUT;
	}
	$WRITE_COUNT{$BUFFER_SIZE}++;
    }

    if (/^   read/) {
	$READ_REAL_TIME{$BUFFER_SIZE} += substr($_, 7, 8);
	$READ_SYS_TIME{$BUFFER_SIZE} += substr($_, 15, 8);
	$READ_SYS_PERCENT{$BUFFER_SIZE} += substr($_, 25, 4);
	$READ_USER_TIME{$BUFFER_SIZE} += substr($_, 31, 8);
	$READ_USER_PERCENT{$BUFFER_SIZE} += substr($_, 41, 4);
	$THROUGHPUT = substr($_, 56, 9);
	$READ_THROUGHPUT{$BUFFER_SIZE} += $THROUGHPUT;
	if ($THROUGHPUT > $READ_PEAK{$BUFFER_SIZE}) {
	    $READ_PEAK{$BUFFER_SIZE} = $THROUGHPUT;
	}
	$READ_COUNT{$BUFFER_SIZE}++;
    }

    if (/^Local system load/) {
	(@STUFF) = split;
	$LOCAL_LOAD_AVERAGE_TOTAL += $STUFF[3];
	$LOCAL_LOAD_AVERAGE_COUNT++;
    }

    if (/^Remote system load/) {
	(@STUFF) = split;
	$REMOTE_LOAD_AVERAGE_TOTAL += $STUFF[3];
	$REMOTE_LOAD_AVERAGE_COUNT++;
    }

    if (/^#data file/) {
	(@STUFF) = split;
	$DATA_FILE = $STUFF[2];
    }

    if (/^TCP maximum segment size/) {
	if (!defined($TCP_MSS)) {
		(@STUFF) = split;
		$TCP_MSS = $STUFF[5];
		print "#tcp mss: $TCP_MSS\n";
	}
    }
}

###################
#
# Done parsing now output.
#

if ($LOCAL_LOAD_AVERAGE_COUNT) {
    printf("#average load on local host: %.2f\n",
	   $LOCAL_LOAD_AVERAGE_TOTAL/$LOCAL_LOAD_AVERAGE_COUNT);
}

if ($REMOTE_LOAD_AVERAGE_COUNT) {
    printf("#average load on remote host: %.2f\n",
	   $REMOTE_LOAD_AVERAGE_TOTAL/$REMOTE_LOAD_AVERAGE_COUNT);
}


@BUFFER_SIZES = sort {$a <=> $b} keys(%WRITE_THROUGHPUT);

if ($FORMAT eq "text") {
    &OUTPUT_TEXT();

} elsif ($FORMAT eq "xgraph") {
    &OUTPUT_XGRAPH();

} elsif ($FORMAT eq "gnuplot") {
    &OUTPUT_GNUPLOT();
}

exit(0);

###########################################################################

sub OUTPUT_TEXT {

    if ($OUTPUT_WRITE_STATS) {
	print "\nWRITE Results:\n";
	print "Buffer size\tAvg Sys Time\tAvg Usr Time\tAvg Mb/s\tPeak Mb/s\n";

	foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	    $COUNT = $WRITE_COUNT{$BUFFER_SIZE};
	    
	    &PRINT_STATS($BUFFER_SIZE,
			 $WRITE_SYS_PERCENT{$BUFFER_SIZE}/$COUNT,
			 $WRITE_USER_PERCENT{$BUFFER_SIZE}/$COUNT,
			 $WRITE_THROUGHPUT{$BUFFER_SIZE}/$COUNT,
			 $WRITE_PEAK{$BUFFER_SIZE});
	}
    }

    if ($OUTPUT_READ_STATS) {
	print "\nREAD Results:\n";
	print "Buffer size\tAvg Sys Time\tAvg Usr Time\tAvg Mb/s\tPeak Mb/s\n";

	foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	    $COUNT = $READ_COUNT{$BUFFER_SIZE};

	    &PRINT_STATS($BUFFER_SIZE,
			 $READ_SYS_PERCENT{$BUFFER_SIZE}/$COUNT,
			 $READ_USER_PERCENT{$BUFFER_SIZE}/$COUNT,
			 $READ_THROUGHPUT{$BUFFER_SIZE}/$COUNT,
			 $READ_PEAK{$BUFFER_SIZE});
	}
    }
}
	    
###########################################################################

sub PRINT_STATS {
    local($BUFFER_SIZE) = shift(@_);
    local($SYS_PERCENT) = shift(@_);
    local($USER_PERCENT) = shift(@_);
    local($THROUGHPUT) = shift(@_);
    local($PEAK) = shift(@_);

    printf(" %s\t   %4.2f%%\t   %4.2f%%\t  %6.1f\t  %6.1f\n",
	   &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	   $SYS_PERCENT,
	   $USER_PERCENT,
	   $THROUGHPUT,
	   $PEAK);
}

###########################################################################

sub BUFFER_SIZE_TO_STR {
    local($BUFFER_SIZE) = shift(@_);

    if ($DO_KILOBYTES) {
	$BUFFER_SIZE /= $KILOBYTE;

	if ($BUFFER_SIZE == int($BUFFER_SIZE)) {
	    $BUFFER_STRING = sprintf("%dK", $BUFFER_SIZE);
	    
	} else {
	    $BUFFER_STRING = sprintf("%.3fK", $BUFFER_SIZE);
	}

    } else {
	$BUFFER_STRING = sprintf("%d", $BUFFER_SIZE);
    }

    return sprintf("%8.8s", $BUFFER_STRING);
}

###########################################################################

sub OUTPUT_XGRAPH {
    printf("\n");
    printf("TitleText: %s to %s\n", $LOCAL_HOST, $REMOTE_HOST);
    printf("BoundBox: 1\n");
    printf("Markers: 1\n");
    printf("Ticks: 1\n");
    if ($DO_KILOBYTES) {
	printf("XUnitText: Buffersize (kilobytes)\n");
    } else {
	printf("XUnitText: Buffersize (bytes)\n");
    }

    if ($OUTPUT eq "percent") {
	&OUTPUT_XGRAPH_PERCENT();
    } else {	     
	&OUTPUT_XGRAPH_THROUGHPUT();
    }
}

###########################################################################

sub OUTPUT_XGRAPH_THROUGHPUT {
    printf("YUnitText: Throughput (Mbits/s)\n");

    printf("\n\"Average write throughput\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $WRITE_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $WRITE_THROUGHPUT{$BUFFER_SIZE}/$COUNT);
    }

    printf("\n\"Peak write throughput\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	printf("%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $WRITE_PEAK{$BUFFER_SIZE});
    }
 
   printf("\n\"Average read throughput\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $READ_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $READ_THROUGHPUT{$BUFFER_SIZE}/$COUNT);
    }

    printf("\n\"Peak read throughput\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	printf("%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $READ_PEAK{$BUFFER_SIZE});
    }
}

###########################################################################

sub OUTPUT_XGRAPH_PERCENT {
    printf("YUnitText: Percent of Total Time\n");

    printf("\n\"Average write system percent\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $WRITE_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $WRITE_SYS_PERCENT{$BUFFER_SIZE}/$COUNT);
    }

    printf("\n\"Average write user percent\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $WRITE_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $WRITE_USER_PERCENT{$BUFFER_SIZE}/$COUNT);
    }
 
   printf("\n\"Average read system percent\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $READ_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $READ_SYS_PERCENT{$BUFFER_SIZE}/$COUNT);
    }

    printf("\n\"Average read user percent\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $READ_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $READ_USER_PERCENT{$BUFFER_SIZE}/$COUNT);
    }
}


###########################################################################

sub OUTPUT_GNUPLOT {
    # Base filename for data files
    $BASENAME = "$LOCAL_HOST.$REMOTE_HOST.gp.data";

    $READ_AVG_FILE = "$BASENAME.read.avg";
    $READ_PEAK_FILE = "$BASENAME.read.peak";
    $WRITE_AVG_FILE = "$BASENAME.write.avg";
    $WRITE_PEAK_FILE = "$BASENAME.write.peak";
    $READ_USR_FILE = "$BASENAME.read.user";
    $READ_SYS_FILE = "$BASENAME.read.sys";
    $WRITE_USR_FILE = "$BASENAME.write.user";
    $WRITE_SYS_FILE = "$BASENAME.write.sys";

    $PLOT_CMD = sprintf("plot \"%s\" title \"Write Avg\", \"%s\" title \"Write Peak\", \"%s\" title \"Read Avg\", \"%s\" title \"Read Peak\"\n",
			$WRITE_AVG_FILE, $WRITE_PEAK_FILE,
			$READ_AVG_FILE, $READ_PEAK_FILE);

    printf("\n");
    printf("set title \"%s to %s\"\n", $LOCAL_HOST, $REMOTE_HOST);
    printf("set data style linespoints\n");
    if ($DO_KILOBYTES) {
	printf("set xlabel \"Buffersize (kilobytes)\"\n");
    } else {
	printf("set xlabel \"Buffersize (bytes)\"\n");
    }
    printf("set label \"$DATA_FILE\" at 80,80\n");

    printf("#\n# For percent comment out next two lines and uncomment following two.\n");
    printf("set ylabel \"Throughput (Mbit/s)\"\n");
    
    printf("#set ylabel \"Percent of Total Time\"\n");
    printf("#plot \"%s\" title \"Write User\", \"%s\" title \"Write Sys\", \"%s\" title \"Read User\", \"%s\" title \"Read Sys\"\n",
	   $WRITE_USR_FILE, $WRITE_SYS_FILE,
	   $READ_USR_FILE, $WRITE_SYS_FILE);
    
    if ($GNUPLOT_OUTPUT & $GNUPLOT_PBM) {
	printf("#\n");
	printf("set output \"$LOCAL_HOST-$REMOTE_HOST.pbm\"\n");
	printf("set terminal pbm color small\n");
	printf($PLOT_CMD);
    }

    if ($GNUPLOT_OUTPUT & $GNUPLOT_PS) {
	printf("#\n");
	printf("set output \"$LOCAL_HOST-$REMOTE_HOST.ps\"\n");
	printf("set terminal postscript\n");
	printf($PLOT_CMD);
    }

    if ($GNUPLOT_OUTPUT & $GNUPLOT_X) {
	printf("#\n");
	printf("set output\n");
	printf("set terminal x11\n");
	printf($PLOT_CMD);
	printf("pause -1 \"Press return to continue...\n");
    }


    &CREATE_GNUPLOT_DATA_FILES();
}

	
###########################################################################

sub CREATE_GNUPLOT_DATA_FILES {

    open(READ_AVG, ">$READ_AVG_FILE") ||
	die "Couldn't create file $READ_AVG_FILE.\n";

    open(READ_PEAK, ">$READ_PEAK_FILE") ||
	die "Couldn't create file $READ_PEAK_FILE.\n";

    open(WRITE_AVG, ">$WRITE_AVG_FILE") ||
	die "Couldn't create file $WRITE_AVG_FILE.\n";

    open(WRITE_PEAK, ">$WRITE_PEAK_FILE") ||
	die "Couldn't create file $WRITE_PEAK_FILE.\n";

    open(READ_USR, ">$READ_USR_FILE") ||
	die "Couldn't create file $READ_USR_FILE.\n";

    open(READ_SYS, ">$READ_SYS_FILE") ||
	die "Couldn't create file $READ_SYS_FILE.\n";

    open(WRITE_USR, ">$WRITE_USR_FILE") ||
	die "Couldn't create file $WRITE_USR_FILE.\n";

    open(WRITE_SYS, ">$WRITE_SYS_FILE") ||
	die "Couldn't create file $WRITE_SYS_FILE.\n";


    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $WRITE_COUNT{$BUFFER_SIZE};

	printf(WRITE_PEAK "%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $WRITE_PEAK{$BUFFER_SIZE});

	printf(WRITE_AVG "%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $WRITE_THROUGHPUT{$BUFFER_SIZE}/$COUNT);

	printf(WRITE_USR "%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $WRITE_USER_PERCENT{$BUFFER_SIZE}/$COUNT);

	printf(WRITE_SYS "%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $WRITE_SYS_PERCENT{$BUFFER_SIZE}/$COUNT);

	$COUNT = $READ_COUNT{$BUFFER_SIZE};

	printf(READ_PEAK "%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $READ_PEAK{$BUFFER_SIZE});

	printf(READ_AVG "%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $READ_THROUGHPUT{$BUFFER_SIZE}/$COUNT);

	printf(READ_USR "%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $READ_USER_PERCENT{$BUFFER_SIZE}/$COUNT);

	printf(READ_SYS "%d %f\n", &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	       $READ_SYS_PERCENT{$BUFFER_SIZE}/$COUNT);
    }

    close(READ_AVG);
    close(READ_PEAK);
    close(WRITE_AVG);
    close(WRITE_PEAK);
    close(READ_USR);
    close(READ_SYS);
    close(WRITE_USR);
    close(WRITE_SYS);
}
	
