#!/usr/local/bin/perl
###########################################################################
#
#	parse.nettest
#
#	Parse the output of multi_nettest
#
#	$Id: parse.nettest,v 1.5 1995/03/08 03:13:24 vwelch Exp $
#
###########################################################################

require 'getopts.pl';

###########################################################################

sub USAGE {
    print "Usage:\n";
    print "  parse.nettest <options> <input file>\n";
    print "      -h    Display help.\n";
    print "      -k    Toggle buffers in kilobytes (default TRUE).\n";
    print "      -r    Toggle display of read stats (default TRUE).\n";
    print "      -w    Toggle display of write stats (default TRUE).\n";
    print "      -X    Output in xgraph format.\n";
    print "\nThe following apply to xgraph format:\n";
    print "      -P    Graph percent sys/user usage instead of throughput.\n";
}

###########################################################################

$KILOBYTE = 1024;

###########################################################################

$DO_KILOBYTES = 1;

$OUTPUT_WRITE_STATS = 1;
$OUTPUT_READ_STATS = 1;

###########################################################################

&Getopts('hkrwPX');

if (defined($opt_h)) {
    &USAGE();
    exit 0;
}

if (defined($opt_k)) {
    $DO_KILOBYTES = !$DO_KILOBYTES;
}

if (defined($opt_r)) {
    $OUTPUT_READ_STATS = ! $OUTPUT_READ_STATS;
}

if (defined($opt_w)) {
    $OUTPUT_WRITE_STATS = ! $OUTPUT_WRITE_STATS;
}

$DO_XGRAPH = $opt_X;
$XGRAPH_PERCENT = $opt_P;

###########################################################################

while(<>) {
    if (/^\#/) {		# Comment from multi_nettest
	print;


	if (/^#source:/) {
	    ($FLAK, $LOCAL_HOST) = split;
	}

	if (/^#destination:/) {
	    ($FLAK, $REMOTE_HOST) = split;
	}
    }

    if (/^Transfer/) {
	($FLAK, $DATA, $FLAK) = split;
	($NUMBER_BUFFERS, $BUFFER_SIZE) = split(/\*/, $DATA);
    }

    if (/^  write/) {
	$WRITE_REAL_TIME{$BUFFER_SIZE} += substr($_, 7, 8);
	$WRITE_SYS_TIME{$BUFFER_SIZE} += substr($_, 15, 8);
	$WRITE_SYS_PERCENT{$BUFFER_SIZE} += substr($_, 25, 4);
	$WRITE_USER_TIME{$BUFFER_SIZE} += substr($_, 31, 8);
	$WRITE_USER_PERCENT{$BUFFER_SIZE} += substr($_, 41, 4);
	$THROUGHPUT = substr($_, 56, 9);
	$WRITE_THROUGHPUT{$BUFFER_SIZE} += $THROUGHPUT;
	if ($THROUGHPUT > $WRITE_PEAK{$BUFFER_SIZE}) {
	    $WRITE_PEAK{$BUFFER_SIZE} = $THROUGHPUT;
	}
	$WRITE_COUNT{$BUFFER_SIZE}++;
    }

    if (/^   read/) {
	$READ_REAL_TIME{$BUFFER_SIZE} += substr($_, 7, 8);
	$READ_SYS_TIME{$BUFFER_SIZE} += substr($_, 15, 8);
	$READ_SYS_PERCENT{$BUFFER_SIZE} += substr($_, 25, 4);
	$READ_USER_TIME{$BUFFER_SIZE} += substr($_, 31, 8);
	$READ_USER_PERCENT{$BUFFER_SIZE} += substr($_, 41, 4);
	$THROUGHPUT = substr($_, 56, 9);
	$READ_THROUGHPUT{$BUFFER_SIZE} += $THROUGHPUT;
	if ($THROUGHPUT > $READ_PEAK{$BUFFER_SIZE}) {
	    $READ_PEAK{$BUFFER_SIZE} = $THROUGHPUT;
	}
	$READ_COUNT{$BUFFER_SIZE}++;
    }

    if (/^Local system load/) {
	(@STUFF) = split;
	$LOCAL_LOAD_AVERAGE_TOTAL += $STUFF[3];
	$LOCAL_LOAD_AVERAGE_COUNT++;
    }

    if (/^Remote system load/) {
	(@STUFF) = split;
	$REMOTE_LOAD_AVERAGE_TOTAL += $STUFF[3];
	$REMOTE_LOAD_AVERAGE_COUNT++;
    }
}

###################
#
# Done parsing now output.
#

if ($LOCAL_LOAD_AVERAGE_COUNT) {
    printf("#average load on local host: %.2f\n",
	   $LOCAL_LOAD_AVERAGE_TOTAL/$LOCAL_LOAD_AVERAGE_COUNT);
}

if ($REMOTE_LOAD_AVERAGE_COUNT) {
    printf("#average load on remote host: %.2f\n",
	   $REMOTE_LOAD_AVERAGE_TOTAL/$REMOTE_LOAD_AVERAGE_COUNT);
}


@BUFFER_SIZES = sort {$a <=> $b} keys(%WRITE_THROUGHPUT);

if (defined($DO_XGRAPH)) {
    &OUTPUT_XGRAPH();

} else {
    &OUTPUT_GENERIC();
}

exit(0);

###########################################################################

sub OUTPUT_GENERIC {

    if ($OUTPUT_WRITE_STATS) {
	print "\nWRITE Results:\n";
	print "Buffer size\tAvg Sys Time\tAvg Usr Time\tAvg Mb/s\tPeak Mb/s\n";

	foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	    $COUNT = $WRITE_COUNT{$BUFFER_SIZE};
	    
	    &PRINT_STATS($BUFFER_SIZE,
			 $WRITE_SYS_PERCENT{$BUFFER_SIZE}/$COUNT,
			 $WRITE_USER_PERCENT{$BUFFER_SIZE}/$COUNT,
			 $WRITE_THROUGHPUT{$BUFFER_SIZE}/$COUNT,
			 $WRITE_PEAK{$BUFFER_SIZE});
	}
    }

    if ($OUTPUT_READ_STATS) {
	print "\nREAD Results:\n";
	print "Buffer size\tAvg Sys Time\tAvg Usr Time\tAvg Mb/s\tPeak Mb/s\n";

	foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	    $COUNT = $READ_COUNT{$BUFFER_SIZE};

	    &PRINT_STATS($BUFFER_SIZE,
			 $READ_SYS_PERCENT{$BUFFER_SIZE}/$COUNT,
			 $READ_USER_PERCENT{$BUFFER_SIZE}/$COUNT,
			 $READ_THROUGHPUT{$BUFFER_SIZE}/$COUNT,
			 $READ_PEAK{$BUFFER_SIZE});
	}
    }
}
	    
###########################################################################

sub PRINT_STATS {
    local($BUFFER_SIZE) = shift(@_);
    local($SYS_PERCENT) = shift(@_);
    local($USER_PERCENT) = shift(@_);
    local($THROUGHPUT) = shift(@_);
    local($PEAK) = shift(@_);

    printf(" %s\t   %4.2f%%\t   %4.2f%%\t  %6.1f\t  %6.1f\n",
	   &BUFFER_SIZE_TO_STR($BUFFER_SIZE),
	   $SYS_PERCENT,
	   $USER_PERCENT,
	   $THROUGHPUT,
	   $PEAK);
}

###########################################################################

sub BUFFER_SIZE_TO_STR {
    local($BUFFER_SIZE) = shift(@_);

    if ($DO_KILOBYTES) {
	$BUFFER_SIZE /= $KILOBYTE;

	if ($BUFFER_SIZE == int($BUFFER_SIZE)) {
	    $BUFFER_STRING = sprintf("%dK", $BUFFER_SIZE);
	    
	} else {
	    $BUFFER_STRING = sprintf("%.3fK", $BUFFER_SIZE);
	}

    } else {
	$BUFFER_STRING = sprintf("%d", $BUFFER_SIZE);
    }

    return sprintf("%8.8s", $BUFFER_STRING);
}

###########################################################################

sub OUTPUT_XGRAPH {
    printf("TitleText: %s to %s\n", $LOCAL_HOST, $REMOTE_HOST);
    printf("BoundBox: 1\n");
    printf("Markers: 1\n");
    printf("Ticks: 1\n");
    printf("XUnitText: Buffersize (bytes)\n");

    if (defined($XGRAPH_PERCENT)) {
	&OUTPUT_XGRAPH_PERCENT();
    } else {	     
	&OUTPUT_XGRAPH_THROUGHPUT();
    }
}

###########################################################################

sub OUTPUT_XGRAPH_THROUGHPUT {
    printf("YUnitText: Throughput (Mbits/s)\n");

    printf("\n\"Average write throughput\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $WRITE_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", $BUFFER_SIZE, $WRITE_THROUGHPUT{$BUFFER_SIZE}/$COUNT);
    }

    printf("\n\"Peak write throughput\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $WRITE_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", $BUFFER_SIZE, $WRITE_PEAK{$BUFFER_SIZE});
    }
 
   printf("\n\"Average read throughput\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $READ_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", $BUFFER_SIZE, $READ_THROUGHPUT{$BUFFER_SIZE}/$COUNT);
    }

    printf("\n\"Peak read throughput\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $READ_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", $BUFFER_SIZE, $READ_PEAK{$BUFFER_SIZE});
    }
}

###########################################################################

sub OUTPUT_XGRAPH_PERCENT {
    printf("YUnitText: Percent of Total Time\n");

    printf("\n\"Average write system percent\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $WRITE_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", $BUFFER_SIZE, $WRITE_SYS_PERCENT{$BUFFER_SIZE}/$COUNT);
    }

    printf("\n\"Average write user percent\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $WRITE_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", $BUFFER_SIZE,
	       $WRITE_USER_PERCENT{$BUFFER_SIZE}/$COUNT);
    }
 
   printf("\n\"Average read system percent\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $READ_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", $BUFFER_SIZE,
	       $READ_SYS_PERCENT{$BUFFER_SIZE}/$COUNT);
    }

    printf("\n\"Average read user percent\n");

    foreach $BUFFER_SIZE (@BUFFER_SIZES) {
	$COUNT = $READ_COUNT{$BUFFER_SIZE};

	printf("%d %f\n", $BUFFER_SIZE,
	       $READ_USER_PERCENT{$BUFFER_SIZE}/$COUNT);
    }
}
